# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12UHShdQy6N3YBPlU0TGsInb2ducel9rT
"""

import pandas as  pd
import numpy as np

df = pd.read_csv(r"/content/train_LZdllcl.csv")

df.head()

"""df.shape

"""

df.info()

df.describe()

df.isnull().sum()

df['education']= df['education'].fillna(df['education'].mode()[0])

df['previous_year_rating']= df['previous_year_rating'].fillna(df['previous_year_rating'].mode()[0])

df.isnull().sum()

df.duplicated().sum()

import seaborn as sns

import matplotlib.pyplot as plt

sns.boxplot(data= df[['previous_year_rating']])

df1= df.copy()

from sklearn.preprocessing import LabelEncoder, StandardScaler
le =LabelEncoder()
ss = StandardScaler()

df.columns

cat_cols = [ 'department', 'region', 'education', 'gender',
       'recruitment_channel']

num_cols = ['age','length_of_service','avg_training_score']

X = df.drop(['is_promoted'], axis=1)

y = df['is_promoted']



from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

for column in cat_cols:
    X_train[column] = le.fit_transform(X_train[column])
    X_test[column] = le.transform(X_test[column])

for cols in num_cols:
  X_train[cols]= ss.fit_transform(X_train[[cols]])
  X_test[cols] = ss.transform(X_test[[cols]])

X_train.head()

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

dt = DecisionTreeClassifier()

model1 = dt.fit(X_train, y_train)
y_pred1 = model1.predict(X_test)
# Evaluate the model
print("Classification Report:")
print(classification_report(y_test, y_pred1))
print("Accuracy:", accuracy_score(y_test, y_pred1))

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier()

model2 = rfc.fit(X_train, y_train)
y_pred2 = model2.predict(X_test)
# Evaluate the model
print("Classification Report:")
print(classification_report(y_test, y_pred2))
print("Accuracy:", accuracy_score(y_test, y_pred2))

dftest = pd.read_csv(r"/content/test_2umaH9m.csv")

dftest.head()

dftest.info()

dftest['education']= dftest['education'].fillna(dftest['education'].mode()[0])
dftest['previous_year_rating']= dftest['previous_year_rating'].fillna(dftest['previous_year_rating'].mode()[0])

dftest.isnull().sum()

for column in cat_cols:
    dftest[column] = le.fit_transform(dftest[column])

for cols in num_cols:
  dftest[cols]= ss.fit_transform(dftest[[cols]])

result= model2.predict(dftest)

result

len(result)

sam = pd.read_csv(r"/content/sample_submission_M0L0uXE.csv")

sam

sam['is_promoted'] =  result

sam

sam.to_csv("Hr_result.csv")